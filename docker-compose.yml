version: '3.8'

services:
  # Scanner Service
  scanner-service:
    build:
      context: .
      dockerfile: Dockerfile.scanner
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - TWELVEDATA_API_KEY=${TWELVEDATA_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/scanner_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - scanner-network
    restart: unless-stopped

  # Database Service
  database-service:
    build:
      context: .
      dockerfile: Dockerfile.database
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/scanner_db
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - scanner-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile.notification
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/scanner_db
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - scanner-network
    restart: unless-stopped

  # Market Data Service
  market-data-service:
    build:
      context: .
      dockerfile: Dockerfile.market-data
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - TWELVEDATA_API_KEY=${TWELVEDATA_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/scanner_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - scanner-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/scanner_db
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - scanner-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=scanner_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scanner-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scanner-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - scanner-service
      - database-service
      - notification-service
      - market-data-service
      - auth-service
    networks:
      - scanner-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_WS_URL=ws://localhost/ws
    depends_on:
      - nginx
    networks:
      - scanner-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - scanner-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3006:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - scanner-network
    restart: unless-stopped

  # Logging - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - scanner-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - scanner-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/scanner
    depends_on:
      - elasticsearch
    networks:
      - scanner-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  scanner-network:
    driver: bridge 